# THIS FILE IS AUTOMATICALLY GENERATED.
"""
Calm DSL for Terraform AKS Cluster blueprint

"""

import base64
import os
import json
from calm.dsl.builtins import *
from calm.dsl.config import get_context

ContextObj = get_context()
init_data = ContextObj.get_init_config()


NutanixKeyUser = os.environ['NUTANIX_KEY_USER']
#NutanixPublicKey = read_local_file("nutanix_public_key")
#NutanixKey = read_local_file("nutanix_key")

## need to replace space with new line because make shell removes new lines from variables
if file_exists(os.path.join(init_data["LOCAL_DIR"]["location"], "nutanix_public_key")):
    NutanixPublicKey = read_local_file("nutanix_public_key")
else:
    NutanixPublicKey = os.environ['NUTANIX_PUBLIC_KEY']

if file_exists(os.path.join(init_data["LOCAL_DIR"]["location"], "nutanix_key")):
    NutanixKey = read_local_file("nutanix_key")
else:
    NutanixKey = "-----BEGIN OPENSSH PRIVATE KEY-----" + os.environ['NUTANIX_KEY'].split("KEY-----", 1)[1].split("-----END", 1)[0].replace(" ","\n") + "-----END OPENSSH PRIVATE KEY-----"

NutanixCred = basic_cred(
                    NutanixKeyUser,
                    name="Nutanix",
                    type="KEY",
                    password=NutanixKey,
                    default=True
                )

NutanixUser = os.environ['NUTANIX_USER']
NutanixPassword = os.environ['NUTANIX_PASS']

NutanixPasswordCred = basic_cred(
                    NutanixUser,
                    name="Nutanix Password",
                    type="PASSWORD",
                    password=NutanixPassword,
                    default=True
                )

PrismCentralUser = os.environ['PRISM_CENTRAL_USER']
PrismCentralPassword = os.environ['PRISM_CENTRAL_PASS']
PrismCentralCred = basic_cred(
                    PrismCentralUser,
                    name="Prism Central User",
                    type="PASSWORD",
                    password=PrismCentralPassword,
                    default=False
                )

PrismElementUser = os.environ['PRISM_ELEMENT_USER']
PrismElementPassword = os.environ['PRISM_ELEMENT_PASS']
# PrismElementPassword = read_local_file("prism_element_password")
PrismElementCred = basic_cred(
                    PrismElementUser,
                    name="Prism Element User",
                    type="PASSWORD",
                    password=PrismElementPassword,
                    default=False
                )

EncrypedPrismCentralCreds = base64.b64encode(bytes(PrismCentralPassword, 'utf-8'))
EncrypedPrismElementCreds = base64.b64encode(bytes(PrismElementPassword, 'utf-8'))

# PrismElementPassword = read_local_file("prism_element_password")
# PrismElementCred = basic_cred(
#         PrismElementUser,
#         name="Prism Element User",
#         type="PASSWORD",
#         password=PrismElementPassword,
#         default=False
#     )

# EncrypedPrismElementCreds = base64.b64encode(bytes(PrismElementPassword, 'utf-8'))

AksServiceAccountUser = os.environ['AZURE_USER']
AksServiceAccountPassword = os.environ['AZURE_CLIENT_SECRET']
AksServiceAccountCred = basic_cred(
        AksServiceAccountUser,
        name="Aks Service Account User",
        type="PASSWORD",
        password=AksServiceAccountPassword,
        default=False
    )

AksServiceAccountTenantId = os.environ['AZURE_TENANT_ID']
AksServiceAccountAppId = os.environ['AZURE_CLIENT_ID']
AksServiceAccountSubscriptionId = os.environ['AZURE_SUBSCRIPTION_ID']

# OS Image details for VM
# Centos74_Image = vm_disk_package(
#         name="centos7_generic",
#         config_file="image_configs/centos74_disk.yaml"
#     )

BastionHostEndpoint = os.getenv("BASTION_WS_ENDPOINT")

class Aks_WorkstationService(Service):
    """Workstation Service"""

    # @action
    # def InstallDocker(name="Install Docker"):
    #     CalmTask.Exec.ssh(
    #         name="Intall Docker",
    #         filename="../_common/centos/scripts/install_docker.sh",
    #         cred=NutanixCred
    #     )
    #     CalmTask.Exec.ssh(
    #         name="Intall Docker Compose",
    #         filename="../_common/centos/scripts/install_docker_compose.sh",
    #         cred=NutanixCred
    #     )

    # @action
    # def InstallKubeCTL(name="Install kubectl"):
    #     CalmTask.Exec.ssh(
    #         name="Install Kube CTL",
    #         filename="../_common/centos/scripts/install_kubectl.sh",
    #         cred=NutanixCred
    #     )
    #     CalmTask.Exec.ssh(
    #         name="Configure Kubectl Aliases",
    #         filename="../_common/centos/scripts/configure_kubectl_aliases.sh",
    #         cred=NutanixCred
    #     )
    #     CalmTask.Exec.ssh(
    #         name="Install Kubectx and Kubens",
    #         filename="../_common/centos/scripts/install_kubectx_kubens.sh",
    #         cred=NutanixCred
    #     )
    #     CalmTask.Exec.ssh(
    #         name="Install Kube PS1",
    #         filename="../_common/centos/scripts/install_kube-ps1.sh",
    #         cred=NutanixCred
    #     )
    #     CalmTask.Exec.ssh(
    #         name="Install Kubectl Krew Package Manager",
    #         filename="../_common/centos/scripts/install_kubectl_krew.sh",
    #         cred=NutanixCred
    #     )
    #     CalmTask.Exec.ssh(
    #         name="Install Stern",
    #         filename="../_common/centos/scripts/install_stern.sh",
    #         cred=NutanixCred
    #     )
    #     CalmTask.Exec.ssh(
    #         name="Install JQ",
    #         filename="../_common/centos/scripts/install_jq.sh",
    #         cred=NutanixCred
    #     )

    # @action
    # def InstallPackages(name="Install Packages"):
    #     CalmTask.Exec.ssh(
    #         name="Install Packages",
    #         filename="../_common/centos/scripts/install_required_packages.sh",
    #         cred=NutanixCred
    #     )
    #     CalmTask.Exec.ssh(
    #         name="Install Helm",
    #         filename="../_common/centos/scripts/install_helm.sh",
    #         cred=NutanixCred
    #     )

    # @action
    # def InstallVim(name="Install Vim"):
    #     CalmTask.Exec.ssh(
    #         name="Install Vim",
    #         filename="../_common/centos/scripts/install_vim.sh",
    #         cred=NutanixCred
    #     )

    # @action
    # def ConfigureUser(name="Configure User"):
    #     CalmTask.Exec.ssh(
    #         name="Configure User",
    #         filename="../_common/centos/scripts/configure_user.sh",
    #         cred=NutanixCred
    #     )

    # @action
    # def InstallTerraform(name="Install Terraform"):
    #     CalmTask.Exec.ssh(
    #         name="Install Terraform",
    #         filename="../_common/centos/scripts/install_terraform.sh",
    #         cred=NutanixCred
    #     )
    #     CalmTask.Exec.ssh(
    #         name="Install GoLang",
    #         filename="../_common/centos/scripts/install_golang.sh",
    #         cred=NutanixCred
    #     )

    @action
    def DeployAKSCluster(name="Deploy AKS"):
        CalmTask.Exec.ssh(
            name="Clone AKS Terraform Repo",
            filename="scripts/terraform_deploy/clone_repo.sh",
            cred=NutanixCred
        )
        CalmTask.Exec.ssh(
            name="Initialize Terraform",
            filename="scripts/terraform_deploy/initialize_terraform.sh",
            cred=NutanixCred
        )
        CalmTask.Exec.ssh(
            name="Apply Terraform",
            filename="scripts/terraform_deploy/terraform_apply.sh",
            cred=NutanixCred
        )
        CalmTask.Exec.ssh(
            name="Validate AKS",
            filename="scripts/terraform_deploy/validate_k8s_cluster.sh",
            cred=NutanixCred
        )


    @action
    def Aks_Scale_In_Cluster():
        ScaleIn = CalmVariable.Simple.int(
            "1",
            label="",
            regex="^[\d]*$",
            validate_regex=False,
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="",
        )
        CalmTask.Exec.ssh(
            name="Scale_In_Cluster",
            filename="scripts/day_two_actions/terraform_scale_in.sh",
            cred=NutanixCred
        )

    @action
    def Aks_Scale_Out_Cluster():
        ScaleOut = CalmVariable.Simple.int(
            "1",
            label="",
            regex="^[\d]*$",
            validate_regex=False,
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="",
        )
        CalmTask.Exec.ssh(
            name="Scale_Out_Cluster",
            filename="scripts/day_two_actions/terraform_scale_out.sh",
            cred=NutanixCred
        )


    # @action
    # def Aks_Upgrade_Cluster():

    #     CalmTask.Exec.ssh(
    #         filename="scripts/anthos_upgrade_cluster.sh",
    #         name="Upgrade_Cluster"
    #     )

    @action
    def Aks_Destroy_Cluster():

        CalmTask.Exec.ssh(
            name="Aks_Destroy_Cluster",
            filename="scripts/day_two_actions/terraform_destroy.sh",
            cred=NutanixCred
        )

    @action
    def __delete__():
        """System action for deleting an application. Deletes created VMs as well"""

        Aks_WorkstationService.Aks_Destroy_Cluster(name="Aks_Destroy_Cluster")


class Aks_WorkstationPackage(Package):
    """Workstation Package"""

    # Services created by installing this Package
    services = [ref(Aks_WorkstationService)]

    @action
    def __install__():
        # Aks_WorkstationService.ConfigureUser(name="Configure User")
        # Aks_WorkstationService.InstallDocker(name="Install Docker")
        # Aks_WorkstationService.InstallKubeCTL(name="Install KubeCTL")
        # Aks_WorkstationService.InstallPackages(name="Install Required Packages")
        # Aks_WorkstationService.InstallVim(name="Install Vim")
        # Aks_WorkstationService.InstallTerraform(name="Install Terraform")
        Aks_WorkstationService.DeployAKSCluster(name="Deploy AKS Cluster")


# class Aks_WorkstationVmResources(AhvVmResources):

#     memory = 4
#     vCPUs = 2
#     cores_per_vCPU = 1
#     disks = [
#         AhvVmDisk.Disk.Scsi.cloneFromVMDiskPackage(Centos74_Image, bootable=True)
#     ]
#     nics = [
#         AhvVmNic.NormalNic(os.getenv("IPAM_VLAN")),
#     ]

#     boot_type = "BIOS"

#     guest_customization = AhvVmGC.CloudInit(filename="scripts/guest_customizations/guest_cus.yaml")

# class Aks_WorkstationVm(AhvVm):

#     resources = Aks_WorkstationVmResources
#     categories = {"AppFamily": "Demo", "AppType": "Default"}


class Aks_WorkstationSubstrate(Substrate):
    name = "AKS Admin Workstation VM"

    # provider_spec = Aks_WorkstationVm
    # provider_spec.name = "aks-admin-workstation-@@{calm_unique}@@"

    # os_type = "Linux"
    # readiness_probe = {
    #     "disabled": False,
    #     "delay_secs": "15",
    #     "connection_type": "SSH",
    #     "connection_port": 22,
    #     "credential": ref(NutanixCred),
    # }

    # @action
    # def __pre_create__():
    #     CalmTask.SetVariable.escript(
    #         name="Set Lowercase App Name",
    #         filename="../_common/centos/scripts/set_lower_case_app_name.py",
    #         variables=["app_name"],
    #     )

    os_type = "Linux"
    provider_type = "EXISTING_VM"
    provider_spec = read_provider_spec(os.path.join("image_configs", "karbonctl_workstation_provider_spec.yaml"))

    provider_spec.spec["address"] = BastionHostEndpoint

    readiness_probe = readiness_probe(
        connection_type="SSH",
        disabled=False,
        retries="5",
        connection_port=22,
        address=BastionHostEndpoint,
        delay_secs="60",
        credential=ref(NutanixCred),
    )


class Aks_WorkstationDeployment(Deployment):
    """Workstation Deployment"""

    packages = [ref(Aks_WorkstationPackage)]
    substrate = ref(Aks_WorkstationSubstrate)


class Aks_WorkstationProfile(Profile):

    # Deployments under this profile
    deployments = [Aks_WorkstationDeployment]

    nutanix_public_key = CalmVariable.Simple.Secret(
        NutanixPublicKey,
        label="Nutanix Public Key",
        is_hidden=True,
        description="SSH public key for the Nutanix user."
    )
    pc_instance_port = CalmVariable.Simple.string(
        "9440",
        label="Prism Central Port Number",
        is_mandatory=True,
        runtime=True,
        description="IP address of the Prism Central instance that manages this Calm instance."
    )
    pc_instance_ip = CalmVariable.Simple.string(
        os.getenv("PC_IP_ADDRESS"),
        label="Prism Central IP",
        is_mandatory=True,
        runtime=True,
        description="IP address of the Prism Central instance that manages this Calm instance."
    )

    aks_sa_appid = CalmVariable.Simple.string(
        AksServiceAccountAppId,
        label="Azure Kubernetes Service Cluster Service Principal App Id",
        is_mandatory=True,
        runtime=True,
        is_hidden=True,
        description="APPID / CLIENT_ID of pre-created Azure Kubernetes Service Cluster service principal."
    )

    aks_sa_tenant = CalmVariable.Simple.string(
        AksServiceAccountTenantId,
        label="Azure Kubernetes Service Cluster Service Principal Tenant Id",
        is_mandatory=True,
        runtime=True,
        is_hidden=True,
        description="TENANT_ID of pre-created Azure Kubernetes Service Cluster service principal."
    )

    aks_sa_subscriptionid = CalmVariable.Simple.string(
        AksServiceAccountSubscriptionId,
        label="Azure Kubernetes Service Cluster Subscription Id",
        is_mandatory=True,
        runtime=True,
        is_hidden=True,
        description="Subscription ID associated to Azure Kubernetes Service Cluster service principal."
    )

    @action
    def ScaleOut():
        """This action will scale out worker nodes by given scale out count"""

        ScaleOut = CalmVariable.Simple.int(
            "1",
            label="",
            regex="^[\d]*$",
            validate_regex=False,
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="",
        )
        Aks_WorkstationService.Aks_Scale_Out_Cluster(name="Aks_Scale_Out_Cluster")

    @action
    def ScaleIn():
        """This action will scale in workder nodes by given scale in count"""

        ScaleIn = CalmVariable.Simple.int(
            "1",
            label="",
            regex="^[\d]*$",
            validate_regex=False,
            is_mandatory=True,
            is_hidden=False,
            runtime=True,
            description="",
        )
        Aks_WorkstationService.Aks_Scale_In_Cluster(name="Aks_Scale_In_Cluster")

    # @action
    # def UpgradeRke():
    #     """This action will upgrade the Rke cluster to a new version"""

    #     ANTHOS_VERSION = CalmVariable.Simple(
    #         "",
    #         label="Rke cluster version",
    #         regex="^(\d+\.)?(\d+\.)?(\*|\d+)$",
    #         validate_regex=True,
    #         is_mandatory=True,
    #         is_hidden=False,
    #         runtime=True,
    #         description="The only supported version is 1.6.1, but 1.6.2 or 1.7.0 can be tested.",
    #     )
    #     AdminVM.Aks_Upgrade_Cluster(name="Aks_Upgrade_Cluster")


class Aks_Workstation(Blueprint):
    """ Blueprint for Aks_Workstation app using AHV VM"""

    credentials = [
            NutanixCred,
            NutanixPasswordCred,
            PrismCentralCred,
            AksServiceAccountCred,
    ]
    services = [Aks_WorkstationService]
    packages = [Aks_WorkstationPackage]
    substrates = [Aks_WorkstationSubstrate]
    profiles = [Aks_WorkstationProfile]
