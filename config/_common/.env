.SECONDEXPANSION:

################################################################
## environment specific configs - REQUIRES UPDATE BEYOND SA TEAM
################################################################

SHELL=/bin/bash
ENVIRONMENT_SHORT=$(shell echo ${ENVIRONMENT} | cut -d- -f1-2)

##################################################################################
# BUILD VARIABLES
##################################################################################

VERSION=$(shell git describe --tags --exact-match 2>/dev/null || git symbolic-ref -q --short HEAD)
BUILD_DATE=$(shell date +%FT%T%z)

## Getting local git repository details prior
GIT_LATEST_TAG=$(shell git rev-list --tags --max-count=1 | xargs -I {} git describe --tags {})
GIT_COMMIT_ID=$(shell git rev-parse --short HEAD 2>/dev/null)
GIT_BRANCH_NAME=$(shell git rev-parse --abbrev-ref HEAD | head -c14)

GIT_VERSION=$(shell git describe --tags --dirty --always | sed -e 's/^v//')
GIT_IS_SNAPSHOT=$(if $(findstring -, $(GIT_VERSION)),true,false)
GIT_MAJOR_VERSION=$(word 1, $(subst ., ,$(GIT_VERSION)))
GIT_MINOR_VERSION=$(word 2, $(subst ., ,$(GIT_VERSION)))
GIT_PATCH_VERSION=$(word 3, $(subst ., ,$(word 1,$(subst -, , $(GIT_VERSION)))))
GIT_NEW_VERSION=$(GIT_MAJOR_VERSION).$(GIT_MINOR_VERSION).$(shell echo $$(( $(GIT_PATCH_VERSION) + 1))-$(GIT_COMMIT_ID))

# Git Repo URL for Blueprint Description details
GIT_REPO_URL=$(shell git remote get-url origin | rev | cut -c5- | rev)

# Blueprint Git Tag remove dot notation because dots are not allowed in Blueprint Naming
BP_GIT_TAG=$(shell git rev-list --tags --max-count=1 | xargs -I {} git describe --tags {} | tr -d '.')

# Marketplace Git Tag leaves dot notation and remove v character to stay in line with existing semantic versioning guidelines
MP_GIT_TAG=$(shell git rev-list --tags --max-count=1 | xargs -I {} git describe --tags {} | tr -d 'v')

COMMON_CONFIG_DIR=$(CURDIR)/config/_common
ENV_CONFIG_DIR=$(CURDIR)/config/${ENVIRONMENT}
ENV_BUILD_CACHE=${ENV_CONFIG_DIR}/.cache

##################################################################################
# GLOBAL SECRETS
##################################################################################

YAML_SECRETS_PATH=config/_common/secrets.yaml
PGP_KEY_PATH=.local/_common/sops_gpg_key

ARTIFACTORY_USER=$(shell sops --decrypt ${YAML_SECRETS_PATH} 2>/dev/null | yq eval .artifactory_user - )
ARTIFACTORY_PASS=$(shell sops --decrypt ${YAML_SECRETS_PATH} 2>/dev/null | yq eval .artifactory_password - )

AWX_USER=$(shell sops --decrypt ${YAML_SECRETS_PATH} 2>/dev/null | yq eval .awx_user - )
AWX_PASS=$(shell sops --decrypt ${YAML_SECRETS_PATH} 2>/dev/null | yq eval .awx_password - )

JENKINS_USER=$(shell sops --decrypt ${YAML_SECRETS_PATH} 2>/dev/null | yq eval .jenkins_user - )
JENKINS_PASS=$(shell sops --decrypt ${YAML_SECRETS_PATH} 2>/dev/null | yq eval .jenkins_password - )

ARGOCD_USER=$(shell sops --decrypt ${YAML_SECRETS_PATH} 2>/dev/null | yq eval .argocd_user - )
ARGOCD_PASS=$(shell sops --decrypt ${YAML_SECRETS_PATH} 2>/dev/null | yq eval .argocd_password - )

KEYCLOAK_USER=$(shell sops --decrypt ${YAML_SECRETS_PATH} 2>/dev/null | yq eval .keycloak_user - )
KEYCLOAK_PASS=$(shell sops --decrypt ${YAML_SECRETS_PATH} 2>/dev/null | yq eval .keycloak_password - )

HARBOR_USER=$(shell sops --decrypt ${YAML_SECRETS_PATH} 2>/dev/null | yq eval .harbor_user - )
HARBOR_PASS=$(shell sops --decrypt ${YAML_SECRETS_PATH} 2>/dev/null | yq eval .harbor_password - )

RANCHER_USER=$(shell sops --decrypt ${YAML_SECRETS_PATH} 2>/dev/null | yq eval .rancher_user - )
RANCHER_PASS=$(shell sops --decrypt ${YAML_SECRETS_PATH} 2>/dev/null | yq eval .rancher_password - )

MONGODB_USER=$(shell sops --decrypt ${YAML_SECRETS_PATH} 2>/dev/null | yq eval .mongodb_user - )
MONGODB_PASS=$(shell sops --decrypt ${YAML_SECRETS_PATH} 2>/dev/null | yq eval .mongodb_password - )

CALM_DSL_USER=$(shell sops --decrypt ${YAML_SECRETS_PATH} 2>/dev/null | yq eval .calm_dsl_user - )
CALM_DSL_PASS=$(shell sops --decrypt ${YAML_SECRETS_PATH} 2>/dev/null | yq eval .calm_dsl_pass - )

NUTANIX_KEY_USER=$(shell sops --decrypt ${YAML_SECRETS_PATH} 2>/dev/null | yq eval .nutanix_key_user - )
NUTANIX_USER=$(shell sops --decrypt ${YAML_SECRETS_PATH} 2>/dev/null | yq eval .nutanix_user - )
NUTANIX_PASS=$(shell sops --decrypt ${YAML_SECRETS_PATH} 2>/dev/null | yq eval .nutanix_password - )

PRISM_CENTRAL_USER=$(shell sops --decrypt ${YAML_SECRETS_PATH} 2>/dev/null | yq eval .prism_central_user - )
PRISM_CENTRAL_PASS=$(shell sops --decrypt ${YAML_SECRETS_PATH} 2>/dev/null | yq eval .prism_central_password - )

## setting era_user / pass to same as prism_central, will update sops later
ERA_USER=$(shell sops --decrypt ${YAML_SECRETS_PATH} 2>/dev/null | yq eval .prism_central_user - )
ERA_PASS=$(shell sops --decrypt ${YAML_SECRETS_PATH} 2>/dev/null | yq eval .prism_central_password - )

PRISM_ELEMENT_USER=$(shell sops --decrypt ${YAML_SECRETS_PATH} 2>/dev/null | yq eval .prism_element_user - )
PRISM_ELEMENT_PASS=$(shell sops --decrypt ${YAML_SECRETS_PATH} 2>/dev/null | yq eval .prism_element_password - )

WINDOWS_DOMAIN_USER=$(shell sops --decrypt ${YAML_SECRETS_PATH} 2>/dev/null | yq eval .windows_domain_user - )
WINDOWS_DOMAIN_PASS=$(shell sops --decrypt ${YAML_SECRETS_PATH} 2>/dev/null | yq eval .windows_domain_password - )

NUTANIX_KEY=$(shell sops --decrypt ${YAML_SECRETS_PATH} 2>/dev/null | yq eval .nutanix_key - )
NUTANIX_PUBLIC_KEY=$(shell sops --decrypt ${YAML_SECRETS_PATH} 2>/dev/null | yq eval .nutanix_public_key - )

NUTANIX_KEY_PATH=.local/${ENVIRONMENT}/nutanix_key
NUTANIX_PUBLIC_KEY_PATH=.local/${ENVIRONMENT}/nutanix_public_key

AZURE_USER=$(shell sops --decrypt ${YAML_SECRETS_PATH} 2>/dev/null | yq eval .azure_user - )
AZURE_TENANT_ID=$(shell sops --decrypt ${YAML_SECRETS_PATH} 2>/dev/null | yq eval .azure_tenant_id - )
AZURE_SUBSCRIPTION_ID=$(shell sops --decrypt ${YAML_SECRETS_PATH} 2>/dev/null | yq eval .azure_subscription_id - )
AZURE_CLIENT_ID=$(shell sops --decrypt ${YAML_SECRETS_PATH} 2>/dev/null | yq eval .azure_client_id - )
AZURE_CLIENT_SECRET=$(shell sops --decrypt ${YAML_SECRETS_PATH} 2>/dev/null | yq eval .azure_client_secret - )

## needed for terraform
ARM_TENANT_ID=${AZURE_TENANT_ID}
ARM_SUBSCRIPTION_ID=${AZURE_SUBSCRIPTION_ID}
ARM_CLIENT_ID=${AZURE_CLIENT_ID}
ARM_CLIENT_SECRET=${AZURE_CLIENT_SECRET}

AWS_ACCESS_KEY_ID=$(shell sops --decrypt ${YAML_SECRETS_PATH} 2>/dev/null | yq eval .aws_access_key_id - )
AWS_SECRET_ACCESS_KEY=$(shell sops --decrypt ${YAML_SECRETS_PATH} 2>/dev/null | yq eval .aws_access_key_secret - )
AWS_DEFAULT_REGION=us-east-2
AWS_ROUTE53_DOMAIN=ncnlabs.ninja

DOCKER_HUB_USER=$(shell sops --decrypt ${YAML_SECRETS_PATH} 2>/dev/null | yq eval .docker_hub_user - )
DOCKER_HUB_PASS=$(shell sops --decrypt ${YAML_SECRETS_PATH} 2>/dev/null | yq eval .docker_hub_password - )

GITHUB_REPO_URL=$(shell sops --decrypt ${YAML_SECRETS_PATH} 2>/dev/null | yq eval .github_repo_url - )
GITHUB_USER=$(shell sops --decrypt ${YAML_SECRETS_PATH} 2>/dev/null | yq eval .github_user - )
GITHUB_PASS=$(shell sops --decrypt ${YAML_SECRETS_PATH} 2>/dev/null | yq eval .github_password - )
GITHUB_EMAIL=$(shell sops --decrypt ${YAML_SECRETS_PATH} 2>/dev/null | yq eval .github_email - )

## needed for git commit hooks to execute properly
GITGUARDIAN_API_KEY=$(shell sops --decrypt ${YAML_SECRETS_PATH} 2>/dev/null | yq eval .gitguardian_api_key - )


OBJECTS_ACCESS_KEY=$(shell sops --decrypt ${YAML_SECRETS_PATH} 2>/dev/null | yq eval .objects_access_key - )
OBJECTS_SECRET_KEY=$(shell sops --decrypt ${YAML_SECRETS_PATH} 2>/dev/null | yq eval .objects_secret_key - )

VSPHERE_USERNAME=$(shell sops --decrypt ${YAML_SECRETS_PATH} 2>/dev/null | yq eval .vsphere_username - )
VSPHERE_PASSWORD=$(shell sops --decrypt ${YAML_SECRETS_PATH} 2>/dev/null | yq eval .vsphere_password - )

CLOUD_FLARE_API_TOKEN=$(shell sops --decrypt ${YAML_SECRETS_PATH} 2>/dev/null | yq eval .cloudflare_api_token - )

OCP_PULL_SECRET_JSON=$(shell sops --decrypt ${YAML_SECRETS_PATH} 2>/dev/null | yq eval .ocp_pull_secret_json - )

GCP_SERVICE_KEY_JSON=$(shell sops --decrypt ${YAML_SECRETS_PATH} 2>/dev/null | yq eval .gcp_service_key_json - )

RANCHER_ACCESS_KEY=$(shell sops --decrypt ${YAML_SECRETS_PATH} 2>/dev/null | yq eval .rancher_access_key - )
RANCHER_ACCESS_SECRET=$(shell sops --decrypt ${YAML_SECRETS_PATH} 2>/dev/null | yq eval .rancher_access_secret - )


##################################################################################
# PRISM CENTRAL DEFAULTS
##################################################################################

# requires .calm/.local/prism_central_password to be configured
PC_USER=${PRISM_CENTRAL_USER}
PC_PASS=${PRISM_CENTRAL_PASS}
PC_CRED=${PRISM_CENTRAL_USER}:${PRISM_CENTRAL_PASS}
PC_PORT=9440
PE_PORT=9440

##################################################################################
# CALM INFRA DEFAULTS
##################################################################################

CALM_PROJECT=BootcampInfra
CALM_ENVIRONMENT=${ENVIRONMENT_SHORT}

CALM_DSL_PC_IP=${PC_IP_ADDRESS}
CALM_DSL_PC_PORT=${PC_PORT}
CALM_DSL_PC_USERNAME=${PC_USER}
CALM_DSL_PC_PASSWORD=${PC_PASS}
CALM_DSL_DEFAULT_PROJECT=${CALM_PROJECT}

# exporting different flavors of the exact same thing due to scripts having different requirements.
PC_IP=${PC_IP_ADDRESS}
PC_PASSWORD=${PC_PASS}
PC_PROJECT=${CALM_PROJECT}

CALM_DSL_CONFIG_FILE_LOCATION=/root/.calm/${ENVIRONMENT}/config.ini
CALM_DSL_DB_LOCATION=/root/.calm/${ENVIRONMENT}/dsl.db
CALM_DSL_LOCAL_DIR_LOCATION=/root/.calm/${ENVIRONMENT}/
CALM_DSL_LOG_LEVEL=INFO

# additional category items to add for Calm Marketplace. These are added to AppFamily in Prism Central

CALM_CATEGORIES_LIST=DataProtection,ServiceMesh,ImageRegistry,Observability,CICD_GitOps,KubernetesDistro,Security,IdentityManagement,Operators,ConfigManagement,InfraManagement,K8s_ControlPlane,K8s_Etcd,K8s_Workers

# additional category items to add for AppType Categories to support Nutanix Flow

APP_TYPE_CATEGORIES_LIST=KubernetesControlPlane,KubernetesWorker,KubernetesInfra,BastionHost


##################################################################################
# AZURE DEFAULTS
##################################################################################

AZURE_AGENT_POOL=Default
AZURE_AGENT_VERSION=2.184.2

## explicitly required for Azure Agent VM
AZURE_PIPELINE_URL=https://dev.azure.com/sa-cloud-infra

##################################################################################
# AWS DEFAULTS
##################################################################################

##################################################################################
# HPOC INFRA DEFAULTS
##################################################################################

## domain configs
DOMAIN_NAME=ntnxlab.local

## storage container info
PE_STORAGE_CONTAINER=Default

## ahv network ipam config
IPAM_VLAN=Primary

## set hpoc specific default vars based on SPOC_INSTANCE
HPOC_ID=$(shell echo ${ENVIRONMENT} | cut -d- -f3)
SUBNET_PREFIX=10.38.${HPOC_ID}

## get single node hpoc instance (1-4), used to determine network
SPOC_INSTANCE=$(shell echo ${ENVIRONMENT} | cut -d- -f4)

## Need to add one zero if single node hpoc is under 99
ifeq ($(shell expr $(HPOC_ID) \<= 99), 1)
	PE_CLUSTER_NAME_PREFIX=0${HPOC_ID}
else
	PE_CLUSTER_NAME_PREFIX=${HPOC_ID}
endif

## Need to add two zeros if single node hpoc is 01-09
ifeq ($(shell expr $(HPOC_ID) \<= 10), 1)
  PE_CLUSTER_NAME_PREFIX=00${HPOC_ID}
endif

## if single node hpoc cluster, set pe_cluster suffix
ifneq (${SPOC_INSTANCE},)
  PE_CLUSTER_NAME=PHX-SPOC${PE_CLUSTER_NAME_PREFIX}-${SPOC_INSTANCE}
else
  PE_CLUSTER_NAME=PHX-POC${PE_CLUSTER_NAME_PREFIX}
endif

## if hpoc cluster is multi-node cluster spoc-instance id not used.
ifeq (${SPOC_INSTANCE},)
  ## network configs
  NETWORK=${SUBNET_PREFIX}.0
  GATEWAY=${SUBNET_PREFIX}.1
  CIDR=25
  ## IPAM Range
  DHCP_IP_POOL_RANGE=${SUBNET_PREFIX}.47-${SUBNET_PREFIX}.125
  ## prism central / element configs
  PE_CLUSTER_VIP=${SUBNET_PREFIX}.37
  PE_DATASERVICES_VIP=${SUBNET_PREFIX}.38
  PC_IP_ADDRESS=${SUBNET_PREFIX}.39
  ## vcenter ip
  VSPHERE_SERVER=${SUBNET_PREFIX}.10
  ## ldap / dns configs
  DNS=${SUBNET_PREFIX}.41
  ## explicitly for objects
  OBJECTS_STORE_PUBLIC_IP=${SUBNET_PREFIX}.18
  ## era vm ip
  ERA_VM_IP=${SUBNET_PREFIX}.22
  ## policy engine vm ip
  CALM_POLICY_ENGINE_VM_IP=${SUBNET_PREFIX}.23
  ## packer machine build ip
  PACKER_VM_BUILD_IP=${SUBNET_PREFIX}.24
  ## Openshift IPs from IPAM
  OCP_API_VIP=${SUBNET_PREFIX}.42
  OCP_APPS_INGRESS_VIP=${SUBNET_PREFIX}.43
  ## CAPI
  CAPI_CONTROLPLANE_VIP=${SUBNET_PREFIX}.44
  CAPI_INGRESS_VIP=${SUBNET_PREFIX}.45
  CAPI_LB_ADDRESSPOOL=${SUBNET_PREFIX}.45-${SUBNET_PREFIX}.46
  ## karbon prod, ingress and external vip configs
  ifeq (${ENVIRONMENT_SHORT},kalm-main)
    KARBON_EXT_IPV4=${SUBNET_PREFIX}.11
    KARBON_INGRESS_VIP=${SUBNET_PREFIX}.12
    K8S_SVC_LB_ADDRESSPOOL=${SUBNET_PREFIX}.12-${SUBNET_PREFIX}.14
  endif
  ifeq (${ENVIRONMENT_SHORT},kalm-develop)
    KARBON_EXT_IPV4=${SUBNET_PREFIX}.15
    KARBON_INGRESS_VIP=${SUBNET_PREFIX}.16
    K8S_SVC_LB_ADDRESSPOOL=${SUBNET_PREFIX}.16-${SUBNET_PREFIX}.17
  endif
endif

## i.e., PHX-SPOC-15-1
ifeq (${SPOC_INSTANCE},1)
  ## network configs
  NETWORK=${SUBNET_PREFIX}.0
  GATEWAY=${SUBNET_PREFIX}.1
  CIDR=26
  ## IPAM Range
  DHCP_IP_POOL_RANGE=${SUBNET_PREFIX}.31-${SUBNET_PREFIX}.61
  ## prism central / element configs
  PE_CLUSTER_VIP=${SUBNET_PREFIX}.7
  PE_DATASERVICES_VIP=${SUBNET_PREFIX}.8
  PC_IP_ADDRESS=${SUBNET_PREFIX}.9
  ## vcenter ip
  VSPHERE_SERVER=${SUBNET_PREFIX}.10
  ## ldap / dns configs
  DNS=${SUBNET_PREFIX}.11
  ## explicitly for objects
  OBJECTS_STORE_PUBLIC_IP=${SUBNET_PREFIX}.14
  ## era vm ip
  ERA_VM_IP=${SUBNET_PREFIX}.22
  ## policy engine vm ip
  CALM_POLICY_ENGINE_VM_IP=${SUBNET_PREFIX}.23
  ## packer machine build ip
  PACKER_VM_BUILD_IP=${SUBNET_PREFIX}.24
  ## Openshift
  OCP_API_VIP=${SUBNET_PREFIX}.25
  OCP_APPS_INGRESS_VIP=${SUBNET_PREFIX}.26
  ## Anthos
  ANTHOS_CONTROLPLANE_VIP=${SUBNET_PREFIX}.16
  ANTHOS_INGRESS_VIP=${SUBNET_PREFIX}.17
  ANTHOS_LB_ADDRESSPOOL=${SUBNET_PREFIX}.17-${SUBNET_PREFIX}.18
  ## CAPI
  CAPI_CONTROLPLANE_VIP=${SUBNET_PREFIX}.23
  CAPI_INGRESS_VIP=${SUBNET_PREFIX}.24
  CAPI_LB_ADDRESSPOOL=${SUBNET_PREFIX}.24-${SUBNET_PREFIX}.25
  ## karbon prod, ingress and external vip configs
  ifeq (${ENVIRONMENT_SHORT},kalm-main)
    KARBON_EXT_IPV4=${SUBNET_PREFIX}.15
    KARBON_INGRESS_VIP=${SUBNET_PREFIX}.16
    K8S_SVC_LB_ADDRESSPOOL=${SUBNET_PREFIX}.16-${SUBNET_PREFIX}.18
  endif
  ifeq (${ENVIRONMENT_SHORT},kalm-develop)
    KARBON_EXT_IPV4=${SUBNET_PREFIX}.25
    KARBON_INGRESS_VIP=${SUBNET_PREFIX}.26
    K8S_SVC_LB_ADDRESSPOOL=${SUBNET_PREFIX}.26-${SUBNET_PREFIX}.27
  endif
endif

## i.e., PHX-SPOC-15-2
ifeq (${SPOC_INSTANCE},2)
  ## network configs
  NETWORK=${SUBNET_PREFIX}.64
  GATEWAY=${SUBNET_PREFIX}.65
  CIDR=26
  ## IPAM Range
  DHCP_IP_POOL_RANGE=${SUBNET_PREFIX}.92-${SUBNET_PREFIX}.125
  ## prism central / element configs
  PE_CLUSTER_VIP=${SUBNET_PREFIX}.71
  PE_DATASERVICES_VIP=${SUBNET_PREFIX}.72
  PC_IP_ADDRESS=${SUBNET_PREFIX}.73
  ## vcenter ip
  VSPHERE_SERVER=${SUBNET_PREFIX}.74
  ## ldap / dns configs
  DNS=${SUBNET_PREFIX}.75
  ## explicitly for objects
  OBJECTS_STORE_PUBLIC_IP=${SUBNET_PREFIX}.78
  ## era vm ip
  ERA_VM_IP=${SUBNET_PREFIX}.86
  ## policy engine vm ip
  CALM_POLICY_ENGINE_VM_IP=${SUBNET_PREFIX}.87
  ## packer machine build ip
  PACKER_VM_BUILD_IP=${SUBNET_PREFIX}.88
  ## Openshift
  OCP_API_VIP=${SUBNET_PREFIX}.89
  OCP_APPS_INGRESS_VIP=${SUBNET_PREFIX}.90
  ## ANTHOS
  ANTHOS_CONTROLPLANE_VIP=${SUBNET_PREFIX}.84
  ANTHOS_INGRESS_VIP=${SUBNET_PREFIX}.85
  ANTHOS_LB_ADDRESSPOOL=${SUBNET_PREFIX}.85-${SUBNET_PREFIX}.86
  ## CAPI
  CAPI_CONTROLPLANE_VIP=${SUBNET_PREFIX}.92
  CAPI_INGRESS_VIP=${SUBNET_PREFIX}.93
  CAPI_LB_ADDRESSPOOL=${SUBNET_PREFIX}.93-${SUBNET_PREFIX}.94
  ## karbon prod, ingress and external vip configs
  ifeq (${ENVIRONMENT_SHORT},kalm-main)
    KARBON_EXT_IPV4=${SUBNET_PREFIX}.79
    KARBON_INGRESS_VIP=${SUBNET_PREFIX}.80
    K8S_SVC_LB_ADDRESSPOOL=${SUBNET_PREFIX}.80-${SUBNET_PREFIX}.83
  endif
  ifeq (${ENVIRONMENT_SHORT},kalm-develop)
    KARBON_EXT_IPV4=${SUBNET_PREFIX}.89
    KARBON_INGRESS_VIP=${SUBNET_PREFIX}.90
    K8S_SVC_LB_ADDRESSPOOL=${SUBNET_PREFIX}.90-${SUBNET_PREFIX}.91
  endif
endif

# ## i.e., PHX-SPOC-15-3
ifeq (${SPOC_INSTANCE},3)
  ## network configs
  NETWORK=${SUBNET_PREFIX}.128
  GATEWAY=${SUBNET_PREFIX}.129
  CIDR=26
  ## IPAM Range
  DHCP_IP_POOL_RANGE=${SUBNET_PREFIX}.156-${SUBNET_PREFIX}.189
  ## prism central / element configs
  PE_CLUSTER_VIP=${SUBNET_PREFIX}.135
  PE_DATASERVICES_VIP=${SUBNET_PREFIX}.136
  PC_IP_ADDRESS=${SUBNET_PREFIX}.137
  ## vcenter ip
  VSPHERE_SERVER=${SUBNET_PREFIX}.138
  ## ldap / dns configs
  DNS=${SUBNET_PREFIX}.139
  ## explicitly for objects
  OBJECTS_STORE_PUBLIC_IP=${SUBNET_PREFIX}.142
  ## era vm ip
  ERA_VM_IP=${SUBNET_PREFIX}.150
  ## policy engine vm ip
  CALM_POLICY_ENGINE_VM_IP=${SUBNET_PREFIX}.151
  ## packer machine build ip
  PACKER_VM_BUILD_IP=${SUBNET_PREFIX}.152
  ## Openshift
  OCP_API_VIP=${SUBNET_PREFIX}.153
  OCP_APPS_INGRESS_VIP=${SUBNET_PREFIX}.154
  ## ANTHOS
  ANTHOS_CONTROLPLANE_VIP=${SUBNET_PREFIX}.149
  ANTHOS_INGRESS_VIP=${SUBNET_PREFIX}.150
  ANTHOS_LB_ADDRESSPOOL=${SUBNET_PREFIX}.150-${SUBNET_PREFIX}.151
  ## CAPI
  CAPI_CONTROLPLANE_VIP=${SUBNET_PREFIX}.157
  CAPI_INGRESS_VIP=${SUBNET_PREFIX}.158
  CAPI_LB_ADDRESSPOOL=${SUBNET_PREFIX}.158-${SUBNET_PREFIX}.159
  ## karbon prod, ingress and external vip configs
  ifeq (${ENVIRONMENT_SHORT},kalm-main)
    KARBON_EXT_IPV4=${SUBNET_PREFIX}.143
    KARBON_INGRESS_VIP=${SUBNET_PREFIX}.144
    K8S_SVC_LB_ADDRESSPOOL=${SUBNET_PREFIX}.144-${SUBNET_PREFIX}.146
  endif
  ifeq (${ENVIRONMENT_SHORT},kalm-develop)
    KARBON_EXT_IPV4=${SUBNET_PREFIX}.153
    KARBON_INGRESS_VIP=${SUBNET_PREFIX}.154
    K8S_SVC_LB_ADDRESSPOOL=${SUBNET_PREFIX}.154-${SUBNET_PREFIX}.155
  endif
endif

# ## i.e., PHX-SPOC-15-4
ifeq (${SPOC_INSTANCE},4)
  ## network configs
  NETWORK=${SUBNET_PREFIX}.192
  GATEWAY=${SUBNET_PREFIX}.193
  CIDR=26
  ## IPAM Range
  DHCP_IP_POOL_RANGE=${SUBNET_PREFIX}.220-${SUBNET_PREFIX}.253
  ## prism central / element configs
  PE_CLUSTER_VIP=${SUBNET_PREFIX}.199
  PE_DATASERVICES_VIP=${SUBNET_PREFIX}.200
  PC_IP_ADDRESS=${SUBNET_PREFIX}.201
  ## vcenter ip
  VSPHERE_SERVER=${SUBNET_PREFIX}.202
  ## ldap / dns configs
  DNS=${SUBNET_PREFIX}.203
  ## explicitly for objects
  OBJECTS_STORE_PUBLIC_IP=${SUBNET_PREFIX}.206
  ## era vm ip
  ERA_VM_IP=${SUBNET_PREFIX}.214
  ## policy engine vm ip
  CALM_POLICY_ENGINE_VM_IP=${SUBNET_PREFIX}.215
  ## packer machine build ip
  PACKER_VM_BUILD_IP=${SUBNET_PREFIX}.216
  ## Openshift
  OCP_APPS_INGRESS_VIP=${SUBNET_PREFIX}.217
  OCP_API_VIP=${SUBNET_PREFIX}.218
  ## ANTHOS
  ANTHOS_CONTROLPLANE_VIP=${SUBNET_PREFIX}.212
  ANTHOS_INGRESS_VIP=${SUBNET_PREFIX}.213
  ANTHOS_LB_ADDRESSPOOL=${SUBNET_PREFIX}.213-${SUBNET_PREFIX}.214
  ## CAPI
  CAPI_CONTROLPLANE_VIP=${SUBNET_PREFIX}.220
  CAPI_INGRESS_VIP=${SUBNET_PREFIX}.221
  CAPI_LB_ADDRESSPOOL=${SUBNET_PREFIX}.221-${SUBNET_PREFIX}.222
  ## karbon prod, ingress and external vip configs
  ifeq (${ENVIRONMENT_SHORT},kalm-main)
    KARBON_EXT_IPV4=${SUBNET_PREFIX}.207
    KARBON_INGRESS_VIP=${SUBNET_PREFIX}.208
    K8S_SVC_LB_ADDRESSPOOL=${SUBNET_PREFIX}.208-${SUBNET_PREFIX}.210
  endif
  ifeq (${ENVIRONMENT_SHORT},kalm-develop)
    KARBON_EXT_IPV4=${SUBNET_PREFIX}.217
    KARBON_INGRESS_VIP=${SUBNET_PREFIX}.218
    K8S_SVC_LB_ADDRESSPOOL=${SUBNET_PREFIX}.218-${SUBNET_PREFIX}.219
  endif
endif

# karbon blueprint default configs

## set karbon specific configs. kalm-main is production-like
ifeq (${ENVIRONMENT_SHORT},kalm-main)
  KARBON_CLUSTER_TYPE=Production - Multi-Master Active/Passive
  KARBON_WORKER_COUNT=3
  ENABLE_ADVANCED_KARBON_MGMT=true
  ENABLE_REDHAT_ADVANCED_CLUSTER_MGMT=true
  IMPORT_OCP_MANAGED_CLUSTER=false
else
  KARBON_CLUSTER_TYPE=Development
  KARBON_WORKER_COUNT=2
  ENABLE_ADVANCED_KARBON_MGMT=false
  ENABLE_REDHAT_ADVANCED_CLUSTER_MGMT=false
  IMPORT_OCP_MANAGED_CLUSTER=true
endif

## handling configs for kind clusters
ifeq (${ENVIRONMENT_SHORT},kalm-kind)
  KUBECTL_CONTEXT=kind-${ENVIRONMENT}
  CSI_KINDTEST=true
  DOCKER_NETWORK=kind
else
  KUBECTL_CONTEXT=${ENVIRONMENT}-context
  CSI_KINDTEST=false
  DOCKER_NETWORK=bridge
endif

KARBON_CLUSTER=${ENVIRONMENT}
KARBON_VLAN=${IPAM_VLAN}
KARBON_CONTAINER_OS_VER=ntnx-1.5
KARBON_K8S_VER=1.23.16-0
KARBON_CNI_NAME=calico
KARBON_STORAGE_CONTAINER=${PE_STORAGE_CONTAINER}

KARBON_API_DNS_SHORT=api.${KARBON_CLUSTER}
KARBON_API_DNS_FQDN=${KARBON_API_DNS_SHORT}.${DOMAIN_NAME}
KARBON_API_ENDPOINT=https://${PC_IP_ADDRESS}:9440/karbon

WILDCARD_INGRESS_IP=$(shell echo ${K8S_SVC_LB_ADDRESSPOOL} | cut -d- -f1)
WILDCARD_INGRESS_DNS_SHORT=${KARBON_CLUSTER}
WILDCARD_INGRESS_DNS_SHORT_SIMPLE=${ENVIRONMENT_SHORT}
WILDCARD_INGRESS_DNS_FQDN=${WILDCARD_INGRESS_DNS_SHORT}.${DOMAIN_NAME}

BASTION_WS_ENDPOINT_SHORT=bastionws
BASTION_WS_ENDPOINT=${BASTION_WS_ENDPOINT_SHORT}.${DOMAIN_NAME}

# endpoint configs

## REUSING WINDOWS DNS SERVER as scripting host. Override in DNS as needed
WINDOWS_SCRIPTING_HOST_IP=${DNS}
WINDOWS_SCRIPTING_HOST_USER=${WINDOWS_DOMAIN_USER}
WINDOWS_SCRIPTING_HOST_PASS=${WINDOWS_DOMAIN_PASS}

##################################################################################
# VCENTER DEFAULTS
##################################################################################

VSPHERE_INSECURE=true
VSPHERE_DATACENTER=Datacenter1
VSPHERE_CLUSTER=Cluster1
VSPHERE_DATASTORE=vmContainer1
VSPHERE_NETWORK=VM Network
VSPHERE_TEMPLATE=windows-desktop-10-pro-v22.08-alpha
VSPHERE_FOLDER=
VSPHERE_ISO_DATASTORE=${VSPHERE_DATASTORE}

##################################################################################
# NUTANIX FILES DEFAULTS
##################################################################################

## file server specifics. FS Name is case sensitive
NUTANIX_FILES_NFS_SHORT=BootcampFS
NUTANIX_FILES_NFS_FQDN=${NUTANIX_FILES_NFS_SHORT}.${DOMAIN_NAME}
## file server NFS export specifics
NUTANIX_FILES_NFS_EXPORT=/${ENVIRONMENT_SHORT}-nfs

##################################################################################
# NUTANIX OBJECTS DEFAULTS
##################################################################################

# objects configs
OBJECTS_STORE_DNS_SHORT=ntnx-objects
OBJECTS_STORE_DNS_FQDN=${OBJECTS_STORE_DNS_SHORT}.${DOMAIN_NAME}
# objects bucket configs
OBJECTS_BUCKET_NAME=${ENVIRONMENT_SHORT}-bucket
OBJECTS_BUCKET_DNS_SHORT=${OBJECTS_BUCKET_NAME}.${OBJECTS_STORE_DNS_SHORT}
OBJECTS_BUCKET_DNS_FQDN=${OBJECTS_BUCKET_DNS_SHORT}.${DOMAIN_NAME}

# additional buckets to add for various integration use cases.
OBJECTS_BUCKETS_LIST=kasten,terraform,rancher,quay,image-registry-bucket,mongodb,oadp,thanos

##################################################################################
# HELM CHART DEFAULTS
##################################################################################

##################################################################################
# KASTEN HELM DEFAULTS

## explicitly for Kasten Karbon Cluster - Multi-Cluster - OPTIONAL
PRIMARY_KASTEN_K8S_CLUSTER=${ENVIRONMENT}

##################################################################################
# MONGODB ENTERPRISE OPERATOR HELM DEFAULTS

OPSMANAGER_VERSION=5.0.10
OPSMANAGER_APPDB_VERSION=4.4.4-ent

OPSMANAGER_REPLICASET_COUNT=2
OPSMANAGER_APPDB_REPLICASET_COUNT=3

MONGODB_APPDB_VERSION=4.4.4-ent
MONGODB_APPDB_CONTAINER_IMAGE=mongodb-enterprise-database
MONGODB_APPDB_CPU_LIMITS=2
MONGODB_APPDB_MEM_LIMITS=2G

MONGODB_APPDB_DATA_SIZE=10Gi
MONGODB_APPDB_LOGS_SIZE=500M

MONGODB_APPDB_JOURNAL_SIZE=1Gi

MONGODB_APPDB_REPLICASET_COUNT=3

MONGODB_APPDB_SHARD_COUNT=2
MONGODB_APPDB_MONGODS_PER_SHARD_COUNT=3
MONGODB_APPDB_MONGOS_COUNT=2
MONGODB_APPDB_CONFIGSERVER_COUNT=3

MONGODB_APPDB_STORAGE_CLASS=nutanix-volume

MONGODB_STANDALONE_INSTANCE_NAME=mongodb-demo-standalone
MONGODB_SHARDED_INSTANCE_NAME=mongodb-demo-shardedcluster
MONGODB_REPLICASET_INSTANCE_NAME=mongodb-demo-replicaset

##################################################################################
# VARIOUS K8S DISTRO DEFAULTS
##################################################################################

NTNX_CSI_URL=http://download.nutanix.com/csi/v2.3.1/csi-v2.3.1.tar.gz
NTNX_PE_IP=${PE_CLUSTER_VIP}
NTNX_PE_PORT=${PE_PORT}
NTNX_PE_DATASERVICE_IP=${PE_DATASERVICES_VIP}
NTNX_PE_STORAGE_CONTAINER=${PE_STORAGE_CONTAINER}
NTNX_PE_VLAN=${IPAM_VLAN}
NTNX_PC_IP=${PC_IP_ADDRESS}
NTNX_PC_PORT=${PC_PORT}

##################################################################################
# RANCHER DEFAULTS
##################################################################################

RKE_CLUSTER_NAME=${ENVIRONMENT}-rke
RKE2_CLUSTER_NAME=${ENVIRONMENT}-rke2

##################################################################################
# OPENSHIFT DSL DEFAULTS
##################################################################################

OCP_BASE_DOMAIN=${AWS_ROUTE53_DOMAIN}
OCP_CLUSTER_NAME=${ENVIRONMENT}-ocp

## this assume that same instance is always acm hub unless overridden in .env file
OCP_HUB_CLUSTER_NAME=${ENVIRONMENT}-ocp

OCP_NTNX_PC_DNS_SHORT=prism-central.${OCP_HUB_CLUSTER_NAME}
OCP_NTNX_PC_DNS_FQDN=${OCP_NTNX_PC_DNS_SHORT}.${OCP_BASE_DOMAIN}

OCP_API_DNS_SHORT=api.${OCP_CLUSTER_NAME}
OCP_API_DNS_FQDN=${OCP_API_DNS_SHORT}.${OCP_BASE_DOMAIN}
OCP_API_URL=https://${OCP_API_DNS_FQDN}:6443

OCP_APPS_INGRESS_DNS_SHORT=apps.${OCP_CLUSTER_NAME}
OCP_APPS_INGRESS_DNS_FQDN=${OCP_APPS_INGRESS_DNS_SHORT}.${OCP_BASE_DOMAIN}

OCP_WORKER_REPLICA_COUNT=3
OCP_CONTROL_PLANE_REPLICA_COUNT=3
OCP_INFRA_REPLICA_COUNT=3

##################################################################################
# ANTHOS DSL DEFAULTS
##################################################################################

## TODO: replace ASAP as only used by anthos BP
IPAM_VLAN_UUID=c17634be-4916-4ecb-ae24-5718d02f190e
CALMDSL_OS_USERNAME=${NUTANIX_KEY_USER}
CALMDSL_PC_USERNAME=${PRISM_CENTRAL_USER}
CALMDSL_PC_PASSWORD=${PRISM_CENTRAL_PASS}
CALMDSL_PE_USERNAME=${PRISM_ELEMENT_USER}
CALMDSL_PE_PASSWORD=${PRISM_ELEMENT_PASS}

ANTHOS_CLUSTER_NAME=anthos-${ENVIRONMENT}
ANTHOS_PODS_NETWORK=172.30.0.0/16
ANTHOS_SERVICES_NETWORK=172.31.0.0/16
KUBERNETES_SERVICE_ACCOUNT=google-cloud-console
OS_DISK_SIZE=128
PYTHON_ANTHOS_GENCONFIG=https://raw.githubusercontent.com/pipoe2h/calm-dsl/anthos-on-ahv/blueprints/anthos-on-ahv/scripts/anthos_generate_config.py
ANTHOS_VERSION=1.9.4

##################################################################################
# PACKER DEFAULTS
##################################################################################

##################################################################################
# COMMON PACKER DEFAULTS

PKR_VAR_build_username=${NUTANIX_USER}
PKR_VAR_build_password=${NUTANIX_PASS}

##################################################################################
# NUTANIX AHV PACKER DEFAULTS
##################################################################################

PKR_VAR_ntnx_pc_username=${PRISM_CENTRAL_USER}
PKR_VAR_ntnx_pc_password=${PRISM_CENTRAL_PASS}
PKR_VAR_ntnx_insecure=true
PKR_VAR_ntnx_pc_ip=${PC_IP_ADDRESS}
PKR_VAR_ntnx_pc_port=${PC_PORT}

PKR_VAR_ntnx_pe_cluster_name=${PE_CLUSTER_NAME}
PKR_VAR_ntnx_pe_subnet_name=${IPAM_VLAN}

PKR_VAR_centos7_iso_uri=http://artifactory-jcr.10.54.11.42.nip.io/artifactory/isos/linux/centos/7/CentOS-7-x86_64-DVD-2009.iso
PKR_VAR_centos7_iso_name=CentOS-7-x86_64-DVD-2009.iso

PKR_VAR_centos8_iso_uri=http://artifactory-jcr.10.54.11.42.nip.io/artifactory/isos/linux/centos/8/CentOS-8.2.2004-x86_64-dvd1.iso
PKR_VAR_centos8_iso_name=CentOS-8.2.2004-x86_64-dvd1.iso

PKR_VAR_rhel7_iso_uri=http://artifactory-jcr.10.54.11.42.nip.io/artifactory/isos/linux/rhel/7/rhel-server-7.9-x86_64-dvd.iso
PKR_VAR_rhel7_iso_name=rhel-server-7.9-x86_64-dvd.iso

PKR_VAR_rhel8_iso_uri=http://artifactory-jcr.10.54.11.42.nip.io/artifactory/isos/linux/rhel/8/rhel-8.7-x86_64-dvd.iso
PKR_VAR_rhel8_iso_name=rhel-8.7-x86_64-dvd.iso

PKR_VAR_windows_2016_iso_uri=http://artifactory-jcr.10.54.11.42.nip.io/artifactory/isos/microsoft/server/2016/en_windows_server_2016_x64_dvd_9327751.iso
PKR_VAR_windows_2016_iso_name=en_windows_server_2016_x64_dvd_9327751.iso

PKR_VAR_virtio_iso_uri=http://artifactory-jcr.10.54.11.42.nip.io/artifactory/isos/nutanix/drivers/Nutanix-VirtIO-1.1.7.iso
PKR_VAR_virtio_iso_name=Nutanix-VirtIO-1.1.7.iso

PKR_VAR_ubuntu1804_iso_uri=http://artifactory-jcr.10.54.11.42.nip.io/artifactory/isos/linux/ubuntu/lts/ubuntu-18.04.2-server-amd64.iso
PKR_VAR_ubuntu1804_iso_name=ubuntu-18.04.2-server-amd64.iso

PKR_VAR_windows_pe_iso_uri=http://artifactory-jcr.10.54.11.42.nip.io/artifactory/isos/microsoft/pe/WinPE_amd64.iso
PKR_VAR_windows_pe_iso_name=WinPE_amd64.iso

PKR_VAR_windows_10_iso_uri=http://artifactory-jcr.10.54.11.42.nip.io/artifactory/isos/microsoft/pe/win10-wim.iso
PKR_VAR_windows_10_iso_name=win10-wim.iso

TF_AHV_IMAGE_STATE_PATH=$(CURDIR)/terraform.tfstate.d/${ENVIRONMENT}/ahv-upload-images-terraform.tfstate

ifneq (,$(wildcard $(TF_AHV_IMAGE_STATE_PATH)))
PKR_VAR_centos7_iso_uuid=$(shell terraform output -state=$(TF_AHV_IMAGE_STATE_PATH) -raw centos7_uuid 2>/dev/null)
PKR_VAR_centos8_iso_uuid=$(shell terraform output -state=$(TF_AHV_IMAGE_STATE_PATH) -raw centos8_uuid 2>/dev/null)
PKR_VAR_rhel7_iso_uuid=$(shell terraform output -state=$(TF_AHV_IMAGE_STATE_PATH) -raw rhel7_uuid 2>/dev/null)
PKR_VAR_rhel8_iso_uuid=$(shell terraform output -state=$(TF_AHV_IMAGE_STATE_PATH) -raw rhel8_uuid 2>/dev/null)
PKR_VAR_windows_2016_iso_uuid=$(shell terraform output -state=$(TF_AHV_IMAGE_STATE_PATH) -raw win2016_uuid 2>/dev/null)
PKR_VAR_virtio_iso_uuid=$(shell terraform output -state=$(TF_AHV_IMAGE_STATE_PATH) -raw virtio_uuid 2>/dev/null)
PKR_VAR_ubuntu1804_iso_uuid=$(shell terraform output -state=$(TF_AHV_IMAGE_STATE_PATH) -raw ubuntu1804_uuid 2>/dev/null)
PKR_VAR_windows_pe_iso_uuid=$(shell terraform output -state=$(TF_AHV_IMAGE_STATE_PATH) -raw windows_pe_uuid 2>/dev/null)
PKR_VAR_windows_10_iso_uuid=$(shell terraform output -state=$(TF_AHV_IMAGE_STATE_PATH) -raw windows_10_uuid 2>/dev/null)
endif

##################################################################################
# CAPI IMAGE_BUILDER PACKER DEFAULTS

PKR_VAR_force_deregister=true
PKR_VAR_image_export=false
PKR_VAR_nutanix_cluster_name=${PE_CLUSTER_NAME}
PKR_VAR_nutanix_endpoint=${PC_IP_ADDRESS}
PKR_VAR_nutanix_insecure=true
PKR_VAR_nutanix_password=${PRISM_CENTRAL_PASS}
PKR_VAR_nutanix_port=${PC_PORT}
PKR_VAR_nutanix_subnet_name=${IPAM_VLAN}
PKR_VAR_nutanix_username=${PRISM_CENTRAL_USER}
PKR_VAR_scp_extra_vars=""

##################################################################################
# VSPHERE PACKER DEFAULTS

PKR_VAR_vsphere_iso_datastore=${VSPHERE_ISO_DATASTORE}

PKR_VAR_vsphere_server=${VSPHERE_SERVER}
PKR_VAR_vsphere_username=${VSPHERE_USERNAME}
PKR_VAR_vsphere_password=${VSPHERE_PASSWORD}
PKR_VAR_vsphere_insecure=${VSPHERE_INSECURE}

PKR_VAR_vsphere_datacenter=${VSPHERE_DATACENTER}
PKR_VAR_vsphere_cluster=${VSPHERE_CLUSTER}
PKR_VAR_vsphere_datastore=${VSPHERE_DATASTORE}
PKR_VAR_vsphere_folder=${VSPHERE_FOLDER}
PKR_VAR_vsphere_network=${VSPHERE_NETWORK}
PKR_VAR_vsphere_template=${VSPHERE_TEMPLATE}

##################################################################################
# VCENTER TERRAFORM DEFAULTS

TF_VAR_vsphere_server=${VSPHERE_SERVER}
TF_VAR_vsphere_username=${VSPHERE_USERNAME}
TF_VAR_vsphere_password=${VSPHERE_PASSWORD}
TF_VAR_vsphere_insecure=${VSPHERE_INSECURE}

TF_VAR_vsphere_datacenter=${VSPHERE_DATACENTER}
TF_VAR_vsphere_cluster=${VSPHERE_CLUSTER}
TF_VAR_vsphere_datastore=${VSPHERE_DATASTORE}
TF_VAR_vsphere_folder=${VSPHERE_FOLDER}
TF_VAR_vsphere_network=${VSPHERE_NETWORK}
TF_VAR_vsphere_template=${VSPHERE_TEMPLATE}

##################################################################################
# TERRAFORM DEFAULTS
##################################################################################

########
# Shared NUTANIX TERRAFORM Configs

DNS_SUFFIX_LIST=["${DOMAIN_NAME}"]
DNS_SERVER_LIST=["${DNS}"]

TF_VAR_ntnx_pe_subnet_name=${IPAM_VLAN}
TF_VAR_ntnx_pc_username=${PRISM_CENTRAL_USER}
TF_VAR_ntnx_pc_password=${PRISM_CENTRAL_PASS}
TF_VAR_ntnx_pc_ip=${PC_IP_ADDRESS}
TF_VAR_ntnx_pc_port=${PC_PORT}
TF_VAR_ntnx_pe_cluster_name=${PE_CLUSTER_NAME}
TF_VAR_ntnx_pe_storage_container=${PE_STORAGE_CONTAINER}
TF_VAR_ntnx_pe_username=${PRISM_ELEMENT_USER}
TF_VAR_ntnx_pe_password=${PRISM_ELEMENT_PASS}
TF_VAR_ntnx_pe_ip=${PE_CLUSTER_VIP}
TF_VAR_ntnx_pe_port=${PE_PORT}
TF_VAR_ntnx_pe_dataservice_ip=${PE_DATASERVICES_VIP}

TF_VAR_domain_name=${DOMAIN_NAME}
TF_VAR_dns_suffix_list=${DNS_SUFFIX_LIST}
TF_VAR_dns_server_list=${DNS_SERVER_LIST}
TF_VAR_ipv4_network=${NETWORK}
TF_VAR_ipv4_netmask=${CIDR}
TF_VAR_ipv4_gateway=${GATEWAY}

TF_VAR_dhcp_ip_pool=["$(shell echo ${DHCP_IP_POOL_RANGE} | tr "-" " ")"]

TF_VAR_vm_ip=${PACKER_VM_BUILD_IP}

TF_VAR_centos7_iso_uri=${PKR_VAR_centos7_iso_uri}
TF_VAR_centos7_iso_name=${PKR_VAR_centos7_iso_name}

TF_VAR_centos8_iso_uri=${PKR_VAR_centos8_iso_uri}
TF_VAR_centos8_iso_name=${PKR_VAR_centos8_iso_name}

TF_VAR_rhel7_iso_uri=${PKR_VAR_rhel7_iso_uri}
TF_VAR_rhel7_iso_name=${PKR_VAR_rhel7_iso_name}

TF_VAR_rhel8_iso_uri=${PKR_VAR_rhel8_iso_uri}
TF_VAR_rhel8_iso_name=${PKR_VAR_rhel8_iso_name}

TF_VAR_windows_2016_iso_uri=${PKR_VAR_windows_2016_iso_uri}
TF_VAR_windows_2016_iso_name=${PKR_VAR_windows_2016_iso_name}

TF_VAR_virtio_iso_uri=${PKR_VAR_virtio_iso_uri}
TF_VAR_virtio_iso_name=${PKR_VAR_virtio_iso_name}

TF_VAR_ubuntu1804_iso_uri=${PKR_VAR_ubuntu1804_iso_uri}
TF_VAR_ubuntu1804_iso_name=${PKR_VAR_ubuntu1804_iso_name}

TF_VAR_windows_pe_iso_uri=${PKR_VAR_windows_pe_iso_uri}
TF_VAR_windows_pe_iso_name=${PKR_VAR_windows_pe_iso_name}

TF_VAR_windows_10_iso_uri=${PKR_VAR_windows_10_iso_uri}
TF_VAR_windows_10_iso_name=${PKR_VAR_windows_10_iso_name}

TF_VAR_network_config='{{subnet_name=Primary,vlan_id=0,prefix_length=25,default_gateway_ip=${SUBNET_PREFIX}.1,subnet_ip=${SUBNET_PREFIX}.0,ip_config_pool_list_ranges=[${SUBNET_PREFIX}.47 ${SUBNET_PREFIX}.125],dhcp_opt_domain_name=${DOMAIN_NAME},dhcp_domain_name_server_list=${DNS_SERVER_LIST},dhcp_domain_search_list=${DNS_SUFFIX_LIST}},{subnet_name=Secondary,vlan_id=${HPOC_ID}3,prefix_length=25,default_gateway_ip=${SUBNET_PREFIX}.129,subnet_ip=${SUBNET_PREFIX}.128,ip_config_pool_list_ranges=[${SUBNET_PREFIX}.147 ${SUBNET_PREFIX}.225],dhcp_opt_domain_name=${DOMAIN_NAME},dhcp_domain_name_server_list=${DNS_SERVER_LIST},dhcp_domain_search_list=${DNS_SUFFIX_LIST}}}'

##################################################################################
# GENERIC VSPHERE VM DEFAULTS

## TODO: handle vsphere vm configs with terraform
VM_NAME="tf-bastion"
VM_HOSTNAME="tf-bastion"
VM_CPUS=2
VM_MEMORY=4096
VM_MEMORY_RESERVATION=${VM_MEMORY}
VM_FIRMWARE=efi
VM_EFI_SEC_BOOT_ENABLED=true

TF_VAR_vm_name=${VM_NAME}
TF_VAR_vm_hostname=${VM_HOSTNAME}
TF_VAR_vm_cpus=${VM_CPUS}
TF_VAR_vm_memory=${VM_MEMORY}
TF_VAR_vm_memory_reservation=${VM_MEMORY_RESERVATION}
TF_VAR_vm_firmware=${VM_FIRMWARE}
TF_VAR_vm_efi_secure_boot_enabled=${VM_EFI_SEC_BOOT_ENABLED}
TF_VAR_vm_dns_server_list=${DNS_SERVER_LIST}

TF_VAR_vm_domain=${DOMAIN_NAME}
TF_VAR_vm_ipv4_address=${PACKER_VM_BUILD_IP}
TF_VAR_vm_ipv4_netmask=${CIDR}
TF_VAR_vm_ipv4_gateway=${GATEWAY}
TF_VAR_domain_admin_username=${WINDOWS_DOMAIN_USER}
TF_VAR_domain_admin_password=${WINDOWS_DOMAIN_PASS}
TF_VAR_vm_admin_password=${NUTANIX_PASS}

##################################################################################
# KARBON TERRAFORM DEFAULTS

TF_VAR_karbon_cni=${KARBON_CNI_NAME}
TF_VAR_karbon_cluster_name=${KARBON_CLUSTER}
TF_VAR_k8s_version=${KARBON_K8S_VER}
TF_VAR_karbon_os_version=${KARBON_CONTAINER_OS_VER}
TF_VAR_amount_of_karbon_worker_vms=${KARBON_WORKER_COUNT}

##################################################################################
# ANTHOS TERRAFORM DEFAULTS
## SOURCE: https://github.com/nutanixdev/anthos-on-ahv/tree/main/terraform

TF_VAR_anthos_version=${ANTHOS_VERSION}
TF_VAR_anthos_controlplane_vip=${ANTHOS_CONTROLPLANE_VIP}
TF_VAR_anthos_ingress_vip=${ANTHOS_INGRESS_VIP}
TF_VAR_anthos_lb_addresspool=${ANTHOS_LB_ADDRESSPOOL}
TF_VAR_anthos_cluster_name=anthos-${ENVIRONMENT}
TF_VAR_google_application_credentials_path=.local/_common/gcp_service_key.json
TF_VAR_amount_of_anthos_worker_vms=2

##################################################################################
# AZURE TERRAFORM DEFAULTS

TF_VAR_azure_client_id=${AZURE_CLIENT_ID}
TF_VAR_azure_client_secret=${AZURE_CLIENT_SECRET}
TF_VAR_kubernetes_cluster_name=aks-${ENVIRONMENT}

##################################################################################
# OPENSHIFT JUMPHOST TERRAFORM DEFAULTS

TF_VAR_nutanix_subnet=${IPAM_VLAN}
TF_VAR_nutanix_cluster=${PE_CLUSTER_NAME}
TF_VAR_PC_USER=${PRISM_CENTRAL_USER}
TF_VAR_PC_PASS=${PRISM_CENTRAL_PASS}
TF_VAR_PC_ENDPOINT=${PC_IP_ADDRESS}
TF_VAR_PE_USER=${PRISM_ELEMENT_USER}
TF_VAR_PE_PASS=${PRISM_ELEMENT_PASS}
TF_VAR_installer_name=ocp-installer
TF_VAR_OCP_API_VIP=${OCP_API_VIP}
TF_VAR_OCP_INGRESS_VIP=${OCP_APPS_INGRESS_VIP}
TF_VAR_OCP_BASEDOMAIN=${OCP_BASE_DOMAIN}
TF_VAR_OCP_SUBDOMAIN=${OCP_CLUSTER_NAME}
TF_VAR_CONTAINER=${PE_STORAGE_CONTAINER}

TF_VAR_JUMPHOST_PRIVATE_SSH=../../../${NUTANIX_KEY_PATH}
TF_VAR_JUMPHOST_PUBLIC_SSH=../../../${NUTANIX_PUBLIC_KEY_PATH}
TF_VAR_JUMPHOST_IMAGE=https://cloud-images.ubuntu.com/releases/focal/release/ubuntu-20.04-server-cloudimg-amd64.img

TF_VAR_cloudflare_api_token=${CLOUD_FLARE_API_TOKEN}




##################################################################################
# NUTANIX CLUSTER-API-PROVIDER / CAPI DEFAULTS
##################################################################################

CAPI_CLUSTER_NAME=${ENVIRONMENT}-capi
CAPI_COMMON_CLUSTER_NS=ntnx-wkl-clusters
KUBERNETES_VERSION=v1.27.1
CAPI_IMAGE_BUILD_NAME=ubuntu-2204-kube-v1.27.1

## get variables: clusterctl generate cluster mycluster -i nutanix --list-variables 

## Required Variables
CONTROL_PLANE_ENDPOINT_IP=${CAPI_CONTROLPLANE_VIP}
NUTANIX_ENDPOINT=${PC_IP}
NUTANIX_MACHINE_TEMPLATE_IMAGE_NAME=${CAPI_IMAGE_BUILD_NAME}.qcow2
NUTANIX_PASSWORD=${PC_PASS}
NUTANIX_PRISM_ELEMENT_CLUSTER_NAME=${PE_CLUSTER_NAME}
NUTANIX_SSH_AUTHORIZED_KEY=${NUTANIX_KEY_PATH}
NUTANIX_SUBNET_NAME=${IPAM_VLAN}
NUTANIX_USER=${PC_USER}

##################################################################################
# CAPI IMAGE BUILDER TERRAFORM DEFAULTS

TF_VAR_vm_name=${CAPI_IMAGE_BUILD_NAME}
TF_VAR_vm_user=ubuntu
TF_VAR_private_key_file_path=../../../${NUTANIX_KEY_PATH}
TF_VAR_public_key_file_path=../../../${NUTANIX_PUBLIC_KEY_PATH}
TF_VAR_image_url=https://cloud-images.ubuntu.com/releases/focal/release/ubuntu-20.04-server-cloudimg-amd64.img
TF_VAR_image_name=${NUTANIX_MACHINE_TEMPLATE_IMAGE_NAME}

## Optional Variables
CONTROL_PLANE_ENDPOINT_PORT=6443
CONTROL_PLANE_MACHINE_COUNT=1
KUBEVIP_LB_ENABLE=true
KUBEVIP_SVC_ELECTION=true
KUBEVIP_SVC_ENABLE=true
NAMESPACE=${CAPI_COMMON_CLUSTER_NS}
NUTANIX_INSECURE=true
NUTANIX_MACHINE_BOOT_TYPE=legacy
NUTANIX_MACHINE_MEMORY_SIZE=4Gi
NUTANIX_MACHINE_VCPU_PER_SOCKET=1
NUTANIX_MACHINE_VCPU_SOCKET=2
NUTANIX_PORT=${PC_PORT}
NUTANIX_SYSTEMDISK_SIZE=40Gi
WORKER_MACHINE_COUNT=1
